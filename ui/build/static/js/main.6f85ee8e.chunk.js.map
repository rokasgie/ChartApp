{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","react_default","a","createElement","className","es","data","options","title","display","text","fontSize","legend","position","scales","yAxes","ticks","max","beginAtZero","Component","App","isLoading","error","getChartData","_this2","setState","fetch","API_URL","then","response","json","labels","datasets","label","borderColor","backgroundColor","components_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAwCeA,cApCb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAUT,EAAMS,WAHFR,wEAQhB,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,KAAMX,KAAKI,MAAMC,UACjBO,QAAS,CACPC,MAAM,CACJC,SAAS,EACTC,KAAK,wBACLC,SAAS,IAEXC,OAAO,CACLH,SAAS,EACTI,SAAU,UAEZC,OAAQ,CACNC,MAAO,CAAC,CACJC,MAAO,CACHC,IAAK,IACLC,aAAa,iBA3BfC,aCCdC,cAIJ,SAAAA,IAAa,IAAA5B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyB,IACX5B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2B,GAAAtB,KAAAH,QACKI,MAAQ,CACXC,UAAU,GACVM,KAAM,KACNe,WAAW,EACXC,MAAO,MANE9B,oFAWXG,KAAK4B,sDAGO,IAAAC,EAAA7B,KACZA,KAAK8B,SAAS,CAAEJ,WAAW,IAE3BK,MAAMN,EAAIO,SACTC,KAAK,SAAAC,GAAa,OAAOA,EAASC,SAClCF,KAAK,SAAAE,GACJN,EAAKC,SAAS,CACZJ,WAAW,EACXrB,UAAU,CACR+B,OAAQD,EAAI,OACZE,SAAS,CACP,CACEC,MAAM,YACNC,YAAa,uBACb5B,KAAMwB,EAAI,cACVK,gBAAgB,CACd,yBAGJ,CACEF,MAAM,cACNC,YAAa,yBACb5B,KAAMwB,EAAI,gBACVK,gBAAgB,CACd,2BAGJ,CACEF,MAAM,gBACNC,YAAa,uBACb5B,KAAMwB,EAAI,eACVK,gBAAgB,CACd,gEAUZ,OAAIxC,KAAKI,MAAMsB,UAMFpB,EAAAC,EAAAC,cAAA,yBAJXF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiC,EAAD,CAAOpC,UAAWL,KAAKI,MAAMC,oBA/DnBmB,aAAZC,EAEGO,QAAU,kCAoEJP,QC9DKiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.6f85ee8e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Line} from 'react-chartjs-2';\n\nclass Chart extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      chartData:props.chartData\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"chart\">\n        <Line\n          data={this.state.chartData}\n          options={{\n            title:{\n              display: true,\n              text:'Correction Statistics',\n              fontSize:25\n            },\n            legend:{\n              display: true,\n              position: 'bottom'\n            },\n            scales: {\n              yAxes: [{\n                  ticks: {\n                      max: 100,\n                      beginAtZero: true,\n                  }\n              }]\n          }}}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\n\nclass App extends Component {\n  \n  static API_URL = 'http://localhost:8080/data.json';\n\n  constructor(){\n    super();\n    this.state = {\n      chartData:{},\n      data: null,\n      isLoading: false,\n      error: null,\n    }\n  }\n\n  componentWillMount(){\n    this.getChartData();\n  }\n\n  getChartData(){\n    this.setState({ isLoading: true});\n\n    fetch(App.API_URL)\n    .then(response => {return response.json();})\n    .then(json => {   \n      this.setState({\n        isLoading: false,\n        chartData:{\n          labels: json[\"labels\"],\n          datasets:[\n            {\n              label:'Corrected',\n              borderColor: 'rgba(0, 0, 204, 0.8)',\n              data: json[\"correctedData\"],\n              backgroundColor:[\n                'rgba(0, 0, 204, 0.2)',\n              ]\n            },\n            {\n              label:'Uncorrected',\n              borderColor: 'rgba(0, 128, 255, 0.8)',\n              data: json[\"uncorrectedData\"],\n              backgroundColor:[\n                'rgba(0, 128, 255, 0.2)',\n              ]\n            },\n            {\n              label:'Name mismatch',\n              borderColor: 'rgba(0, 255, 0, 0.8)',\n              data: json[\"mismatchedData\"],\n              backgroundColor:[\n                'rgba(0, 255, 0, 0.2)',\n              ]\n            }\n          ]\n        }\n      });\n    });\n  }\n\n  render() {\n    if(!this.state.isLoading)\n    return (\n      <div className=\"App\">\n        <Chart chartData={this.state.chartData}/>\n      </div>\n    );\n    else return (<div>Loading...</div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}